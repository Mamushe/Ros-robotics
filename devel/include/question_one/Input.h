// Generated by gencpp from file question_one/Input.msg
// DO NOT EDIT!


#ifndef QUESTION_ONE_MESSAGE_INPUT_H
#define QUESTION_ONE_MESSAGE_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace question_one
{
template <class ContainerAllocator>
struct Input_
{
  typedef Input_<ContainerAllocator> Type;

  Input_()
    : coor()
    , angels()
    , d(0)  {
    }
  Input_(const ContainerAllocator& _alloc)
    : coor(_alloc)
    , angels(_alloc)
    , d(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coor_type;
  _coor_type coor;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _angels_type;
  _angels_type angels;

   typedef int32_t _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::question_one::Input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::question_one::Input_<ContainerAllocator> const> ConstPtr;

}; // struct Input_

typedef ::question_one::Input_<std::allocator<void> > Input;

typedef boost::shared_ptr< ::question_one::Input > InputPtr;
typedef boost::shared_ptr< ::question_one::Input const> InputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::question_one::Input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::question_one::Input_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::question_one::Input_<ContainerAllocator1> & lhs, const ::question_one::Input_<ContainerAllocator2> & rhs)
{
  return lhs.coor == rhs.coor &&
    lhs.angels == rhs.angels &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::question_one::Input_<ContainerAllocator1> & lhs, const ::question_one::Input_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace question_one

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::question_one::Input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::question_one::Input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::question_one::Input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::question_one::Input_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::question_one::Input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::question_one::Input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::question_one::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3be8f3c7ed7c714a63dc54684d742471";
  }

  static const char* value(const ::question_one::Input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3be8f3c7ed7c714aULL;
  static const uint64_t static_value2 = 0x63dc54684d742471ULL;
};

template<class ContainerAllocator>
struct DataType< ::question_one::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "question_one/Input";
  }

  static const char* value(const ::question_one::Input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::question_one::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] coor \n"
"int32[] angels \n"
"int32 d\n"
;
  }

  static const char* value(const ::question_one::Input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::question_one::Input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coor);
      stream.next(m.angels);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::question_one::Input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::question_one::Input_<ContainerAllocator>& v)
  {
    s << indent << "coor[]" << std::endl;
    for (size_t i = 0; i < v.coor.size(); ++i)
    {
      s << indent << "  coor[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coor[i]);
    }
    s << indent << "angels[]" << std::endl;
    for (size_t i = 0; i < v.angels.size(); ++i)
    {
      s << indent << "  angels[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.angels[i]);
    }
    s << indent << "d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUESTION_ONE_MESSAGE_INPUT_H
